# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Modify challenges' README.md for Jekyll
      # Find challenges' README.md, replace relative paths with absolute paths, add script, and move to a new directory
        run: |
          mkdir info
          find . -maxdepth 2 -mindepth 2 -type f -name 'README.md' -exec sh -c 'foldername=$(basename "$(dirname "$1")");
            sed -i "s|\\./|{{site.baseurl}}/$foldername/|g" "$1";
            echo "<script src=\"{{site.baseurl}}/assets/challenges_readme.js\"></script>" >> "$1";
            mv "$1" "info/$foldername.md"' _ {} \;
      - name: Add meta tags to challenges' index.html
        run: |
          find . -mindepth 2 -type f -name 'index.html' -exec sh -c 'foldername=$(basename "$(dirname "$1")");
            sed -i "s|</head>|<meta property=\"og:type\" content=\"website\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"og:url\" content=\"{{site.baseurl}}/frontend-mentor-solutions/$foldername/\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"og:title\" content=\"Frontend Mentor \| $foldername \" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"og:description\" content=\"\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"og:image\" content=\"{{site.baseurl}}/frontend-mentor-solutions/$foldername/assets/design/desktop-solution.png\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"twitter:card\" content=\"summary_large_image\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"twitter:url\" content=\"{{site.baseurl}}/frontend-mentor-solutions/$foldername/\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"twitter:title\" content=\"Frontend Mentor \| $foldername \" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"twitter:description\" content=\"\" /></head>|g" "$1";
            sed -i "s|</head>|<meta property=\"twitter:image\" content=\"{{site.baseurl}}/frontend-mentor-solutions/$foldername/assets/design/desktop-solution.png\" /></head>|g" "$1"' _ {} \;
      - name: Build Astro pages in subfolders
        run: |
          set -e

          for dir in */ ; do
            if [ -f "$dir/package.json" ] && [ -f "$dir/astro.config.mjs" ]; then
              echo "Building Astro project in $dir"

              cd "$dir"

              npm install
              npm run build

              # Create a temp directory outside the current Astro folder
              mkdir -p /tmp/astro-output
              rm -rf /tmp/astro-output/*

              # Copy contents of dist/ into the safe location
              rsync -a dist/ /tmp/astro-output/

              # Delete all files in the current Astro folder (to avoid Jekyll errors), except assets
              find . -mindepth 1 -maxdepth 1 ! -name 'assets' -exec rm -rf {} +

              # Now copy those back into the Astro root
              rsync -a /tmp/astro-output/ ./

              # Cleanup
              rm -rf dist /tmp/astro-output

              cd ..
            fi
          done
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  update-website:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Trigger Cloudflare Deployment to update projects on my website
        run: curl -X POST "https://api.cloudflare.com/client/v4/pages/webhooks/deploy_hooks/${{ secrets.CF_DEPLOY_HOOK_SECRET }}"
